; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @softmax_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %nctaid.x;", "=r"() #3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 1020, !dbg !12
  %12 = or disjoint i32 %11, 1024, !dbg !12
  %13 = icmp slt i32 %11, %5, !dbg !13
  %14 = icmp slt i32 %12, %5, !dbg !13
  %15 = icmp slt i32 %7, %4, !dbg !14
  br i1 %15, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %6
  %16 = lshr i32 %9, 5, !dbg !12
  %17 = and i32 %9, 31, !dbg !12
  %18 = zext nneg i32 %11 to i64
  %19 = zext nneg i32 %12 to i64
  %20 = icmp eq i32 %17, 0
  %21 = and i32 %16, 7
  %22 = zext nneg i32 %21 to i64
  %23 = getelementptr float, ptr addrspace(3) @global_smem, i64 %22
  %24 = icmp slt i32 %9, 8
  %25 = sext i32 %9 to i64
  %26 = getelementptr float, ptr addrspace(3) @global_smem, i64 %25
  %27 = and i32 %9, 7
  %28 = icmp eq i32 %27, 0
  %29 = and i1 %24, %28
  br label %30, !dbg !14

30:                                               ; preds = %.lr.ph, %30
  %31 = phi i32 [ %7, %.lr.ph ], [ %182, %30 ]
  %32 = mul i32 %31, %2, !dbg !15
  %33 = sext i32 %32 to i64, !dbg !16
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !16
  %35 = getelementptr float, ptr addrspace(1) %34, i64 %18, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %34, i64 %19, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %13, i32 -8388608, i1 %13, i32 -8388608, i1 %13, i32 -8388608, i1 %13, i32 -8388608, i1 %13) #3, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %42 = bitcast i32 %38 to float, !dbg !18
  %43 = bitcast i32 %39 to float, !dbg !18
  %44 = bitcast i32 %40 to float, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %14, i32 -8388608, i1 %14, i32 -8388608, i1 %14, i32 -8388608, i1 %14, i32 -8388608, i1 %14) #3, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !18
  %51 = bitcast i32 %47 to float, !dbg !18
  %52 = bitcast i32 %48 to float, !dbg !18
  %53 = bitcast i32 %49 to float, !dbg !18
  %54 = bitcast i32 %50 to float, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %55 = tail call float @llvm.maxnum.f32(float %42, float %43), !dbg !23
  %56 = tail call float @llvm.maxnum.f32(float %55, float %44), !dbg !23
  %57 = tail call float @llvm.maxnum.f32(float %56, float %45), !dbg !23
  %58 = tail call float @llvm.maxnum.f32(float %57, float %51), !dbg !23
  %59 = tail call float @llvm.maxnum.f32(float %58, float %52), !dbg !23
  %60 = tail call float @llvm.maxnum.f32(float %59, float %53), !dbg !23
  %61 = tail call float @llvm.maxnum.f32(float %60, float %54), !dbg !23
  %62 = bitcast float %61 to i32, !dbg !19
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !19
  %64 = bitcast i32 %63 to float, !dbg !19
  %65 = tail call float @llvm.maxnum.f32(float %61, float %64), !dbg !23
  %66 = bitcast float %65 to i32, !dbg !19
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !19
  %68 = bitcast i32 %67 to float, !dbg !19
  %69 = tail call float @llvm.maxnum.f32(float %65, float %68), !dbg !23
  %70 = bitcast float %69 to i32, !dbg !19
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !19
  %72 = bitcast i32 %71 to float, !dbg !19
  %73 = tail call float @llvm.maxnum.f32(float %69, float %72), !dbg !23
  %74 = bitcast float %73 to i32, !dbg !19
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !19
  %76 = bitcast i32 %75 to float, !dbg !19
  %77 = tail call float @llvm.maxnum.f32(float %73, float %76), !dbg !23
  %78 = bitcast float %77 to i32, !dbg !19
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !19
  %80 = bitcast i32 %79 to float, !dbg !19
  %81 = tail call float @llvm.maxnum.f32(float %77, float %80), !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, float %81, i1 %20) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %82 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %26, i1 %24) #3, !dbg !19
  %83 = bitcast float %82 to i32, !dbg !19
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !19
  %85 = bitcast i32 %84 to float, !dbg !19
  %86 = tail call float @llvm.maxnum.f32(float %82, float %85), !dbg !23
  %87 = bitcast float %86 to i32, !dbg !19
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !19
  %89 = bitcast i32 %88 to float, !dbg !19
  %90 = tail call float @llvm.maxnum.f32(float %86, float %89), !dbg !23
  %91 = bitcast float %90 to i32, !dbg !19
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !19
  %93 = bitcast i32 %92 to float, !dbg !19
  %94 = tail call float @llvm.maxnum.f32(float %90, float %93), !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, float %94, i1 %29) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %95 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %96 = fsub float %42, %95, !dbg !25
  %97 = fsub float %43, %95, !dbg !25
  %98 = fsub float %44, %95, !dbg !25
  %99 = fsub float %45, %95, !dbg !25
  %100 = fsub float %51, %95, !dbg !25
  %101 = fsub float %52, %95, !dbg !25
  %102 = fsub float %53, %95, !dbg !25
  %103 = fsub float %54, %95, !dbg !25
  %104 = fmul float %96, 0x3FF7154760000000, !dbg !26
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #3, !dbg !26
  %106 = fmul float %97, 0x3FF7154760000000, !dbg !26
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #3, !dbg !26
  %108 = fmul float %98, 0x3FF7154760000000, !dbg !26
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #3, !dbg !26
  %110 = fmul float %99, 0x3FF7154760000000, !dbg !26
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #3, !dbg !26
  %112 = fmul float %100, 0x3FF7154760000000, !dbg !26
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #3, !dbg !26
  %114 = fmul float %101, 0x3FF7154760000000, !dbg !26
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #3, !dbg !26
  %116 = fmul float %102, 0x3FF7154760000000, !dbg !26
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #3, !dbg !26
  %118 = fmul float %103, 0x3FF7154760000000, !dbg !26
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %120 = fadd float %105, %107, !dbg !29
  %121 = fadd float %120, %109, !dbg !29
  %122 = fadd float %121, %111, !dbg !29
  %123 = fadd float %122, %113, !dbg !29
  %124 = fadd float %123, %115, !dbg !29
  %125 = fadd float %124, %117, !dbg !29
  %126 = fadd float %125, %119, !dbg !29
  %127 = bitcast float %126 to i32, !dbg !27
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = fadd float %126, %129, !dbg !29
  %131 = bitcast float %130 to i32, !dbg !27
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = fadd float %130, %133, !dbg !29
  %135 = bitcast float %134 to i32, !dbg !27
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = fadd float %134, %137, !dbg !29
  %139 = bitcast float %138 to i32, !dbg !27
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fadd float %138, %141, !dbg !29
  %143 = bitcast float %142 to i32, !dbg !27
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = fadd float %142, %145, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, float %146, i1 %20) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %147 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %26, i1 %24) #3, !dbg !27
  %148 = bitcast float %147 to i32, !dbg !27
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !27
  %150 = bitcast i32 %149 to float, !dbg !27
  %151 = fadd float %147, %150, !dbg !29
  %152 = bitcast float %151 to i32, !dbg !27
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !27
  %154 = bitcast i32 %153 to float, !dbg !27
  %155 = fadd float %151, %154, !dbg !29
  %156 = bitcast float %155 to i32, !dbg !27
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = fadd float %155, %158, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, float %159, i1 %29) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %160 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %160) #3, !dbg !30
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %160) #3, !dbg !30
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %160) #3, !dbg !30
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %160) #3, !dbg !30
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %160) #3, !dbg !30
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %160) #3, !dbg !30
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %160) #3, !dbg !30
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %160) #3, !dbg !30
  %169 = mul i32 %31, %3, !dbg !31
  %170 = sext i32 %169 to i64, !dbg !32
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !32
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %18, !dbg !33
  %173 = getelementptr float, ptr addrspace(1) %171, i64 %19, !dbg !33
  %174 = bitcast float %161 to i32, !dbg !34
  %175 = bitcast float %162 to i32, !dbg !34
  %176 = bitcast float %163 to i32, !dbg !34
  %177 = bitcast float %164 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %174, i32 %175, i32 %176, i32 %177, ptr addrspace(1) %172, i1 %13) #3, !dbg !34
  %178 = bitcast float %165 to i32, !dbg !34
  %179 = bitcast float %166 to i32, !dbg !34
  %180 = bitcast float %167 to i32, !dbg !34
  %181 = bitcast float %168 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %173, i1 %14) #3, !dbg !34
  %182 = add i32 %31, %8, !dbg !14
  %183 = icmp slt i32 %182, %4, !dbg !14
  br i1 %183, label %30, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %30, %6
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "02-fused-softmax.py", directory: "/media/shi/KESU1/ztmp")
!4 = !{ptr @softmax_kernel, !"kernel", i32 1}
!5 = !{ptr @softmax_kernel, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "softmax_kernel", linkageName: "softmax_kernel", scope: !3, file: !3, line: 83, type: !8, scopeLine: 83, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 86, column: 30, scope: !7)
!11 = !DILocation(line: 87, column: 31, scope: !7)
!12 = !DILocation(line: 93, column: 35, scope: !7)
!13 = !DILocation(line: 96, column: 29, scope: !7)
!14 = !DILocation(line: 88, column: 57, scope: !7)
!15 = !DILocation(line: 90, column: 46, scope: !7)
!16 = !DILocation(line: 90, column: 36, scope: !7)
!17 = !DILocation(line: 94, column: 37, scope: !7)
!18 = !DILocation(line: 97, column: 22, scope: !7)
!19 = !DILocation(line: 184, column: 40, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/shi/.local/lib/python3.10/site-packages/triton/language")
!22 = !DILocation(line: 99, column: 37, scope: !7)
!23 = !DILocation(line: 163, column: 27, scope: !24, inlinedAt: !22)
!24 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!25 = !DILocation(line: 99, column: 30, scope: !7)
!26 = !DILocation(line: 101, column: 27, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !28)
!28 = !DILocation(line: 102, column: 29, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !28)
!30 = !DILocation(line: 103, column: 37, scope: !7)
!31 = !DILocation(line: 105, column: 54, scope: !7)
!32 = !DILocation(line: 105, column: 44, scope: !7)
!33 = !DILocation(line: 106, column: 45, scope: !7)
!34 = !DILocation(line: 107, column: 30, scope: !7)
!35 = !DILocation(line: 88, column: 4, scope: !7)
