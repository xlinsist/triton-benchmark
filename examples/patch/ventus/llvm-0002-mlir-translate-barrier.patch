diff --git a/mlir/lib/Target/LLVMIR/Dialect/GPU/GPUToLLVMIRTranslation.cpp b/mlir/lib/Target/LLVMIR/Dialect/GPU/GPUToLLVMIRTranslation.cpp
index eecc8f1001ca..73970902b46a 100644
--- a/mlir/lib/Target/LLVMIR/Dialect/GPU/GPUToLLVMIRTranslation.cpp
+++ b/mlir/lib/Target/LLVMIR/Dialect/GPU/GPUToLLVMIRTranslation.cpp
@@ -9,13 +9,36 @@
 // This file implements a translation between the MLIR GPU dialect and LLVM IR.
 //
 //===----------------------------------------------------------------------===//
+
 #include "mlir/Target/LLVMIR/Dialect/GPU/GPUToLLVMIRTranslation.h"
 #include "mlir/Dialect/GPU/IR/GPUDialect.h"
 #include "mlir/Target/LLVMIR/LLVMTranslationInterface.h"
 #include "llvm/ADT/TypeSwitch.h"
 
+#include "llvm/IR/IRBuilder.h"
+#include "mlir/Target/LLVMIR/ModuleTranslation.h"
+
 using namespace mlir;
 
+static llvm::Function *getOrCreateVentusBarrier(llvm::Module &module) {
+  auto fnName = "llvm.riscv.ventus.barrier";
+  
+  // 检查是否已有同名函数
+  if (llvm::Function *fn = module.getFunction(fnName))
+    return fn;
+
+  // 创建 (i32) -> void 的函数
+  llvm::LLVMContext &ctx = module.getContext();
+  auto *int32Ty = llvm::Type::getInt32Ty(ctx);
+  auto *fnType = llvm::FunctionType::get(llvm::Type::getVoidTy(ctx), {int32Ty}, false);
+
+  // ExternalLinkage => 允许链接阶段解析
+  auto *newFn = llvm::Function::Create(fnType, llvm::GlobalValue::ExternalLinkage, fnName, module);
+
+  return newFn;
+}
+
+
 namespace {
 LogicalResult launchKernel(gpu::LaunchFuncOp launchOp,
                            llvm::IRBuilderBase &builder,
@@ -35,15 +58,19 @@ LogicalResult launchKernel(gpu::LaunchFuncOp launchOp,
                                         moduleTranslation);
 }
 
+/// 翻译接口
 class GPUDialectLLVMIRTranslationInterface
     : public LLVMTranslationDialectInterface {
 public:
   using LLVMTranslationDialectInterface::LLVMTranslationDialectInterface;
 
+  /// convertOperation 在“翻译 GPU Dialect -> LLVM IR”时被调用。
   LogicalResult
   convertOperation(Operation *operation, llvm::IRBuilderBase &builder,
                    LLVM::ModuleTranslation &moduleTranslation) const override {
+
     return llvm::TypeSwitch<Operation *, LogicalResult>(operation)
+        
         .Case([&](gpu::GPUModuleOp) { return success(); })
         .Case([&](gpu::BinaryOp op) {
           auto offloadingHandler =
@@ -55,13 +82,30 @@ public:
         .Case([&](gpu::LaunchFuncOp op) {
           return launchKernel(op, builder, moduleTranslation);
         })
+
+        // gpu.barrier => call void @llvm.riscv.ventus.barrier(i32)
+        .Case([&](gpu::BarrierOp op) {
+          llvm::Module *llvmModule = moduleTranslation.getLLVMModule();
+          llvm::Function *barrierFn = getOrCreateVentusBarrier(*llvmModule);
+
+          // 自动传递 barrier 参数
+          llvm::LLVMContext &ctx = llvmModule->getContext();
+          llvm::Value *barrierArg = llvm::ConstantInt::get(llvm::Type::getInt32Ty(ctx), 1); // 1 = Global Sync
+
+          // 生成 CallInst
+          builder.CreateCall(barrierFn, {barrierArg});
+
+          return success();
+        })
+
+        // 其他 GPU operation 不支持
         .Default([&](Operation *op) {
           return op->emitError("unsupported GPU operation: ") << op->getName();
         });
   }
 };
 
-} // namespace
+} // end anonymous namespace
 
 void mlir::registerGPUDialectTranslation(DialectRegistry &registry) {
   registry.insert<gpu::GPUDialect>();
