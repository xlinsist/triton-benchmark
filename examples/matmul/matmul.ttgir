#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/root/triton/matmul.py":22:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
#shared = #ttg.shared<{vec = 4, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #ttg.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [1, 0], hasLeadingOffset = false}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:86", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f32> loc("/root/triton/matmul.py":22:0), %arg1: !tt.ptr<f32> loc("/root/triton/matmul.py":22:0), %arg2: !tt.ptr<f32> loc("/root/triton/matmul.py":22:0), %arg3: i32 loc("/root/triton/matmul.py":22:0), %arg4: i32 loc("/root/triton/matmul.py":22:0), %arg5: i32 loc("/root/triton/matmul.py":22:0)) attributes {noinline = false} {
    %c24_i32 = arith.constant 24 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c31_i32 : i32 loc(#loc51)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc52)
    %3 = arith.addi %arg4, %c31_i32 : i32 loc(#loc53)
    %4 = arith.divsi %3, %c32_i32 : i32 loc(#loc54)
    %5 = arith.muli %4, %c32_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %5 : i32 loc(#loc9)
    %8 = arith.muli %6, %c32_i32 : i32 loc(#loc10)
    %9 = arith.subi %2, %8 : i32 loc(#loc11)
    %10 = arith.minsi %9, %c32_i32 : i32 loc(#loc12)
    %11 = arith.remsi %7, %10 : i32 loc(#loc13)
    %12 = arith.addi %8, %11 : i32 loc(#loc14)
    %13 = arith.divsi %7, %10 : i32 loc(#loc15)
    %14 = arith.muli %12, %c32_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %16 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc17)
    %17 = tt.splat %14 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %18 = arith.addi %17, %15 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %19 = arith.muli %13, %c32_i32 : i32 loc(#loc19)
    %20 = tt.splat %19 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
    %21 = arith.addi %20, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
    %22 = tt.splat %arg3 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %23 = arith.cmpi slt, %18, %22 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %24 = tt.splat %arg4 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %25 = arith.cmpi slt, %21, %24 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %26 = tt.expand_dims %18 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc23)
    %27 = tt.splat %arg5 : i32 -> tensor<32x1xi32, #blocked> loc(#loc24)
    %28 = arith.muli %26, %27 : tensor<32x1xi32, #blocked> loc(#loc24)
    %29 = tt.broadcast %28 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc25)
    %30 = tt.splat %arg4 : i32 -> tensor<32x1xi32, #blocked> loc(#loc26)
    %31 = tt.expand_dims %21 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc27)
    %32 = tt.broadcast %31 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc28)
    %33 = tt.expand_dims %23 {axis = 1 : i32} : tensor<32xi1, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi1, #blocked> loc(#loc29)
    %34 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
    %35 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %36 = tt.broadcast %33 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc31)
    %37 = tt.expand_dims %25 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc32)
    %38 = tt.broadcast %37 : tensor<1x32xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>, #blocked> loc(#loc34)
    %40 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>, #blocked> loc(#loc35)
    %41 = ttg.local_alloc  : () -> !ttg.memdesc<2x32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
    %42 = ttg.local_alloc  : () -> !ttg.memdesc<2x32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
    %43 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc38)
    %44 = tt.expand_dims %16 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc39)
    %45 = tt.broadcast %44 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc25)
    %46 = arith.addi %29, %45 : tensor<32x32xi32, #blocked> loc(#loc25)
    %47 = tt.expand_dims %15 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc40)
    %48 = arith.muli %47, %30 : tensor<32x1xi32, #blocked> loc(#loc26)
    %49 = tt.broadcast %48 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc28)
    %50 = arith.addi %49, %32 : tensor<32x32xi32, #blocked> loc(#loc28)
    %51 = arith.cmpi slt, %16, %34 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
    %52 = arith.cmpi slt, %15, %35 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %53 = tt.expand_dims %51 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc41)
    %54 = tt.broadcast %53 : tensor<1x32xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc31)
    %55 = arith.andi %36, %54 : tensor<32x32xi1, #blocked> loc(#loc31)
    %56 = tt.expand_dims %52 {axis = 1 : i32} : tensor<32xi1, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi1, #blocked> loc(#loc42)
    %57 = tt.broadcast %56 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc33)
    %58 = arith.andi %38, %57 : tensor<32x32xi1, #blocked> loc(#loc33)
    %59 = tt.addptr %39, %46 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc34)
    %60 = ttg.memdesc_subview %41[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
    %61 = tt.splat %43 : i1 -> tensor<32x32xi1, #blocked> loc(#loc38)
    %62 = arith.andi %61, %55 : tensor<32x32xi1, #blocked> loc(#loc38)
    %63 = ttg.async_copy_global_to_local %59, %60 mask %62 : tensor<32x32x!tt.ptr<f32>, #blocked> -> <32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
    %64 = ttg.async_commit_group %63 loc(#loc36)
    %65 = tt.addptr %40, %50 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc35)
    %66 = ttg.memdesc_subview %42[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
    %67 = arith.andi %61, %58 : tensor<32x32xi1, #blocked> loc(#loc38)
    %68 = ttg.async_copy_global_to_local %65, %66 mask %67 : tensor<32x32x!tt.ptr<f32>, #blocked> -> <32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
    %69 = ttg.async_commit_group %68 loc(#loc37)
    %70 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc38)
    %71 = arith.addi %16, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
    %72 = arith.addi %15, %cst : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %73 = tt.expand_dims %71 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc39)
    %74 = tt.broadcast %73 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc25)
    %75 = arith.addi %29, %74 : tensor<32x32xi32, #blocked> loc(#loc25)
    %76 = tt.expand_dims %72 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc40)
    %77 = arith.muli %76, %30 : tensor<32x1xi32, #blocked> loc(#loc26)
    %78 = tt.broadcast %77 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc28)
    %79 = arith.addi %78, %32 : tensor<32x32xi32, #blocked> loc(#loc28)
    %80 = arith.cmpi slt, %71, %34 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
    %81 = arith.cmpi slt, %72, %35 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %82 = tt.expand_dims %80 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc41)
    %83 = tt.broadcast %82 : tensor<1x32xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc31)
    %84 = arith.andi %36, %83 : tensor<32x32xi1, #blocked> loc(#loc31)
    %85 = tt.expand_dims %81 {axis = 1 : i32} : tensor<32xi1, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi1, #blocked> loc(#loc42)
    %86 = tt.broadcast %85 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc33)
    %87 = arith.andi %38, %86 : tensor<32x32xi1, #blocked> loc(#loc33)
    %88 = tt.addptr %39, %75 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc34)
    %89 = ttg.memdesc_subview %41[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
    %90 = tt.splat %70 : i1 -> tensor<32x32xi1, #blocked> loc(#loc38)
    %91 = arith.andi %90, %84 : tensor<32x32xi1, #blocked> loc(#loc38)
    %92 = ttg.async_copy_global_to_local %88, %89 mask %91 : tensor<32x32x!tt.ptr<f32>, #blocked> -> <32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
    %93 = ttg.async_commit_group %92 loc(#loc36)
    %94 = tt.addptr %40, %79 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc35)
    %95 = ttg.memdesc_subview %42[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
    %96 = arith.andi %90, %87 : tensor<32x32xi1, #blocked> loc(#loc38)
    %97 = ttg.async_copy_global_to_local %94, %95 mask %96 : tensor<32x32x!tt.ptr<f32>, #blocked> -> <32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
    %98 = ttg.async_commit_group %97 loc(#loc37)
    %99 = ttg.async_wait %69 {num = 2 : i32} loc(#loc36)
    %100 = ttg.memdesc_subview %60[%c0_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> loc(#loc36)
    %101 = ttg.local_load %100 : !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> -> tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc36)
    %102 = ttg.memdesc_subview %66[%c0_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> loc(#loc37)
    %103 = ttg.local_load %102 : !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> -> tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc37)
    %104:8 = scf.for %arg6 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg7 = %cst_1, %arg8 = %c1_i32, %arg9 = %c0_i32, %arg10 = %60, %arg11 = %66, %arg12 = %98, %arg13 = %101, %arg14 = %103) -> (tensor<32x32xf32, #mma>, i32, i32, !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable>, !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable>, !ttg.async.token, tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>, tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>>)  : i32 {
      %113 = arith.subi %arg5, %c64_i32 : i32 loc(#loc38)
      %114 = arith.cmpi slt, %arg6, %113 : i32 loc(#loc38)
      %115 = ttg.memdesc_subview %arg10[%c0_i32, %c8_i32] : !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> loc(#loc36)
      %116 = ttg.local_load %115 : !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> -> tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc36)
      %117 = ttg.memdesc_subview %arg11[%c8_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> loc(#loc37)
      %118 = ttg.local_load %117 : !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> -> tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc37)
      %119 = tt.dot %arg13, %arg14, %arg7, inputPrecision = tf32 : tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<32x32xf32, #mma> loc(#loc44)
      %120 = ttg.memdesc_subview %arg10[%c0_i32, %c16_i32] : !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> loc(#loc36)
      %121 = ttg.local_load %120 : !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> -> tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc36)
      %122 = ttg.memdesc_subview %arg11[%c16_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> loc(#loc37)
      %123 = ttg.local_load %122 : !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> -> tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc37)
      %124 = tt.dot %116, %118, %119, inputPrecision = tf32 : tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<32x32xf32, #mma> loc(#loc44)
      %125 = ttg.memdesc_subview %arg10[%c0_i32, %c24_i32] : !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> loc(#loc36)
      %126 = ttg.local_load %125 : !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> -> tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc36)
      %127 = ttg.memdesc_subview %arg11[%c24_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> loc(#loc37)
      %128 = ttg.local_load %127 : !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> -> tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc37)
      %129 = tt.dot %121, %123, %124, inputPrecision = tf32 : tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<32x32xf32, #mma> loc(#loc44)
      %130 = arith.addi %arg8, %c1_i32 : i32 loc(#loc38)
      %131 = arith.cmpi slt, %130, %c2_i32 : i32 loc(#loc38)
      %132 = arith.select %131, %130, %c0_i32 : i32 loc(#loc38)
      %133 = arith.addi %arg6, %c64_i32 : i32 loc(#loc38)
      %134 = tt.splat %133 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
      %135 = tt.splat %133 : i32 -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
      %136 = arith.addi %134, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc43)
      %137 = arith.addi %135, %15 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
      %138 = tt.expand_dims %136 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc39)
      %139 = tt.broadcast %138 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc25)
      %140 = arith.addi %29, %139 : tensor<32x32xi32, #blocked> loc(#loc25)
      %141 = tt.expand_dims %137 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc40)
      %142 = arith.muli %141, %30 : tensor<32x1xi32, #blocked> loc(#loc26)
      %143 = tt.broadcast %142 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc28)
      %144 = arith.addi %143, %32 : tensor<32x32xi32, #blocked> loc(#loc28)
      %145 = arith.cmpi slt, %136, %34 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
      %146 = arith.cmpi slt, %137, %35 : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
      %147 = tt.expand_dims %145 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc41)
      %148 = tt.broadcast %147 : tensor<1x32xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc31)
      %149 = arith.andi %36, %148 : tensor<32x32xi1, #blocked> loc(#loc31)
      %150 = tt.expand_dims %146 {axis = 1 : i32} : tensor<32xi1, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi1, #blocked> loc(#loc42)
      %151 = tt.broadcast %150 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc33)
      %152 = arith.andi %38, %151 : tensor<32x32xi1, #blocked> loc(#loc33)
      %153 = tt.addptr %39, %140 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc34)
      %154 = ttg.memdesc_subview %41[%132, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
      %155 = tt.splat %114 : i1 -> tensor<32x32xi1, #blocked> loc(#loc38)
      %156 = arith.andi %155, %149 : tensor<32x32xi1, #blocked> loc(#loc38)
      %157 = ttg.async_copy_global_to_local %153, %154 mask %156 : tensor<32x32x!tt.ptr<f32>, #blocked> -> <32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
      %158 = ttg.async_commit_group %157 loc(#loc36)
      %159 = tt.addptr %40, %144 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc35)
      %160 = ttg.memdesc_subview %42[%132, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
      %161 = arith.andi %155, %152 : tensor<32x32xi1, #blocked> loc(#loc38)
      %162 = ttg.async_copy_global_to_local %159, %160 mask %161 : tensor<32x32x!tt.ptr<f32>, #blocked> -> <32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
      %163 = ttg.async_commit_group %162 loc(#loc37)
      %164 = arith.addi %arg9, %c1_i32 : i32 loc(#loc38)
      %165 = arith.cmpi slt, %164, %c2_i32 : i32 loc(#loc38)
      %166 = arith.select %165, %164, %c0_i32 : i32 loc(#loc38)
      %167 = ttg.memdesc_subview %41[%166, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc36)
      %168 = ttg.async_wait %arg12 {num = 2 : i32} loc(#loc36)
      %169 = ttg.memdesc_subview %42[%166, %c0_i32, %c0_i32] : !ttg.memdesc<2x32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc37)
      %170 = ttg.memdesc_subview %167[%c0_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable> -> !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> loc(#loc36)
      %171 = ttg.local_load %170 : !ttg.memdesc<32x8xf32, #shared, #ttg.shared_memory> -> tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> loc(#loc36)
      %172 = ttg.memdesc_subview %169[%c0_i32, %c0_i32] : !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable> -> !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> loc(#loc37)
      %173 = ttg.local_load %172 : !ttg.memdesc<8x32xf32, #shared1, #ttg.shared_memory> -> tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc37)
      %174 = tt.dot %126, %128, %129, inputPrecision = tf32 : tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<32x32xf32, #mma> loc(#loc44)
      scf.yield %174, %132, %166, %167, %169, %163, %171, %173 : tensor<32x32xf32, #mma>, i32, i32, !ttg.memdesc<32x32xf32, #shared, #ttg.shared_memory, mutable>, !ttg.memdesc<32x32xf32, #shared1, #ttg.shared_memory, mutable>, !ttg.async.token, tensor<32x8xf32, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>, tensor<8x32xf32, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> loc(#loc38)
    } loc(#loc38)
    %105 = ttg.async_wait  {num = 0 : i32} loc(#loc38)
    ttg.local_dealloc %41 : !ttg.memdesc<2x32x32xf32, #shared, #ttg.shared_memory, mutable> loc(#loc38)
    ttg.local_dealloc %42 : !ttg.memdesc<2x32x32xf32, #shared1, #ttg.shared_memory, mutable> loc(#loc38)
    %106 = arith.muli %26, %30 : tensor<32x1xi32, #blocked> loc(#loc45)
    %107 = tt.broadcast %106 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc46)
    %108 = arith.addi %107, %32 : tensor<32x32xi32, #blocked> loc(#loc46)
    %109 = arith.andi %36, %38 : tensor<32x32xi1, #blocked> loc(#loc47)
    %110 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>, #blocked> loc(#loc48)
    %111 = tt.addptr %110, %108 : tensor<32x32x!tt.ptr<f32>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc48)
    %112 = ttg.convert_layout %104#0 : tensor<32x32xf32, #mma> -> tensor<32x32xf32, #blocked> loc(#loc49)
    tt.store %111, %112, %109 : tensor<32x32x!tt.ptr<f32>, #blocked> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/triton/matmul.py":31:24)
#loc3 = loc("/root/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/root/triton/matmul.py":32:24)
#loc5 = loc("/root/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/root/triton/matmul.py":33:24)
#loc7 = loc("/root/triton/matmul.py":35:34)
#loc8 = loc("/root/triton/matmul.py":36:26)
#loc9 = loc("/root/triton/matmul.py":37:26)
#loc10 = loc("/root/triton/matmul.py":39:37)
#loc11 = loc("/root/triton/matmul.py":40:34)
#loc12 = loc("/root/triton/matmul.py":40:51)
#loc13 = loc("/root/triton/matmul.py":43:48)
#loc14 = loc("/root/triton/matmul.py":43:32)
#loc15 = loc("/root/triton/matmul.py":45:30)
#loc16 = loc("/root/triton/matmul.py":47:20)
#loc17 = loc("/root/triton/matmul.py":47:38)
#loc18 = loc("/root/triton/matmul.py":47:25)
#loc19 = loc("/root/triton/matmul.py":48:20)
#loc20 = loc("/root/triton/matmul.py":48:25)
#loc21 = loc("/root/triton/matmul.py":49:23)
#loc22 = loc("/root/triton/matmul.py":50:23)
#loc23 = loc("/root/triton/matmul.py":56:25)
#loc24 = loc("/root/triton/matmul.py":56:34)
#loc25 = loc("/root/triton/matmul.py":56:38)
#loc26 = loc("/root/triton/matmul.py":57:34)
#loc27 = loc("/root/triton/matmul.py":57:45)
#loc28 = loc("/root/triton/matmul.py":57:38)
#loc29 = loc("/root/triton/matmul.py":58:27)
#loc30 = loc("/root/triton/matmul.py":58:46)
#loc31 = loc("/root/triton/matmul.py":58:38)
#loc32 = loc("/root/triton/matmul.py":59:27)
#loc33 = loc("/root/triton/matmul.py":59:38)
#loc34 = loc("/root/triton/matmul.py":61:34)
#loc35 = loc("/root/triton/matmul.py":62:34)
#loc36 = loc("/root/triton/matmul.py":61:41)
#loc37 = loc("/root/triton/matmul.py":62:41)
#loc38 = loc("/root/triton/matmul.py":53:28)
#loc39 = loc("/root/triton/matmul.py":56:45)
#loc40 = loc("/root/triton/matmul.py":57:25)
#loc41 = loc("/root/triton/matmul.py":58:49)
#loc42 = loc("/root/triton/matmul.py":59:49)
#loc43 = loc("/root/triton/matmul.py":54:21)
#loc44 = loc("/root/triton/matmul.py":63:35)
#loc45 = loc("/root/triton/matmul.py":65:30)
#loc46 = loc("/root/triton/matmul.py":65:34)
#loc47 = loc("/root/triton/matmul.py":66:34)
#loc48 = loc("/root/triton/matmul.py":68:21)
#loc49 = loc("/root/triton/matmul.py":68:37)
#loc50 = loc("/root/triton/matmul.py":68:4)
#loc51 = loc(callsite(#loc3 at #loc4))
#loc52 = loc(callsite(#loc5 at #loc4))
#loc53 = loc(callsite(#loc3 at #loc6))
#loc54 = loc(callsite(#loc5 at #loc6))
